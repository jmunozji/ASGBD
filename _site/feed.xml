<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/ASGBD/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/ASGBD/" rel="alternate" type="text/html" /><updated>2023-04-05T19:42:58+02:00</updated><id>http://localhost:4000/ASGBD/feed.xml</id><title type="html">ASGBD notes</title><subtitle>These are the class notes for 2023-2024 ASGBD module</subtitle><entry><title type="html">Windows Server in Azure</title><link href="http://localhost:4000/ASGBD/unit0/Windows_Server_in_Azure" rel="alternate" type="text/html" title="Windows Server in Azure" /><published>2023-03-29T11:00:00+02:00</published><updated>2023-03-29T11:00:00+02:00</updated><id>http://localhost:4000/ASGBD/unit0/Windows_Server_in_Azure</id><content type="html" xml:base="http://localhost:4000/ASGBD/unit0/Windows_Server_in_Azure"><![CDATA[<h1 id="windows-server-in-azure">Windows Server in Azure</h1>

<p>In this note we will see how to create a Windows Server 2012. We will use that machine to install our Oracle Database afterwards.</p>

<p>First, we have to access the <a href="https://portal.azure.com/">Azure Portal</a> using our Azure for Students Account.</p>

<p>In the next images we will display with a red square the options that have to be changed or revised. You can forget about the rest of available options.</p>

<p>Once logged in, we will create a new resource.</p>

<p><img src="../assets/Windows_Server_in_Azure/01.png" alt="WindowsServerInstallation" /></p>

<p>As we are going to deply a Windows Server, let’s find the available options typing down “Windows server” in the search bar.</p>

<p><img src="../assets/Windows_Server_in_Azure/02.png" alt="WindowsServerInstallation" /></p>

<p>Select “Windows Server”</p>

<p><img src="../assets/Windows_Server_in_Azure/03.png" alt="WindowsServerInstallation" /></p>

<p>Let’s use [smalldisk] Windows Server 2012 R2 Datacenter, that is the minimum Server available.</p>

<p><img src="../assets/Windows_Server_in_Azure/04.png" alt="WindowsServerInstallation" /></p>

<p>In the next screen, make sure that the “Azure for Students” suscription is selected. Create a new “Resource group” to allocate all necessary resources (virtual machine, virtual network, disks…)</p>

<p><img src="../assets/Windows_Server_in_Azure/05.png" alt="WindowsServerInstallation" /></p>

<p>Configure the “Project details” as shown. That is enough for our needs while keeping the costs down.</p>

<p><img src="../assets/Windows_Server_in_Azure/06.png" alt="WindowsServerInstallation" /></p>

<p>The disk size can put up the costs quite a bit. Make sure that you select the proposed disk size. Don’t keep the default.</p>

<p><img src="../assets/Windows_Server_in_Azure/07.png" alt="WindowsServerInstallation" /></p>

<p>Now we create the disk where the OS will be installed.</p>

<p><img src="../assets/Windows_Server_in_Azure/08.png" alt="WindowsServerInstallation" /></p>

<p>In Azure the OS disk is used to install the OS, but is not big enough to further installations. We have to create a “data disk” where we will install our Oracle.</p>

<p>Follow the images to create it.</p>

<p><img src="../assets/Windows_Server_in_Azure/09.png" alt="WindowsServerInstallation" /></p>

<p><img src="../assets/Windows_Server_in_Azure/10.png" alt="WindowsServerInstallation" /></p>

<p>Make it read/write.</p>

<p><img src="../assets/Windows_Server_in_Azure/11.png" alt="WindowsServerInstallation" /></p>

<p>Finally, we create the virtual network. Let’s keep the default options for now. We can “Revise and create” the resources now.</p>

<p><img src="../assets/Windows_Server_in_Azure/12.png" alt="WindowsServerInstallation" /></p>

<p>If all is correct the validation will be completed and we can proceed and create the resources. Make sure the costs ara similar to the ones shown in the image. If they are bigger, go back and revise the selected options.</p>

<p><img src="../assets/Windows_Server_in_Azure/13.png" alt="WindowsServerInstallation" /></p>

<p>The resources will be implemented and the machine will be created.</p>

<p>It could be a good idea to configure the automatic shutdown so the machine is shut down every night in case we forget to shut it manually to avoid innecesary costs.</p>

<p><img src="../assets/Windows_Server_in_Azure/15.png" alt="WindowsServerInstallation" /></p>

<p><img src="../assets/Windows_Server_in_Azure/14.png" alt="WindowsServerInstallation" /></p>

<p>Once the VM is created we will see all the information about it. It is interesting to check the private and public IP addresses, as we will need them to connect to the VM.</p>

<blockquote>
  <p>ATENTION!</p>

  <p>The public IP address will could change. Make note of the new IP each time you try to connect to the VM.</p>
</blockquote>

<p>We can now connect to our Windows Server using RDP protocol. It allows us to make a graphical connection to the machine. Make click on “Connect” and then select RDP.</p>

<p><img src="../assets/Windows_Server_in_Azure/16.png" alt="WindowsServerInstallation" /></p>

<p><img src="../assets/Windows_Server_in_Azure/17.png" alt="WindowsServerInstallation" /></p>

<p>Here we have all the necessary information to connect to the VM, the IP address and port.</p>

<p><img src="../assets/Windows_Server_in_Azure/18.png" alt="WindowsServerInstallation" /></p>

<p>We can now use a Remote Desktop software to make the connection. In lliurex we have KRDC and Remmina. We could also use Windows Remote Desktop in Windows or Mac.</p>

<h2 id="connection-using-krdc">Connection using KRDC</h2>

<p>In the following images we can see how to use KRDC to make the connection.</p>

<p>Just select protocol RDP and the public IP address.</p>

<p><img src="../assets/Windows_Server_in_Azure/19.png" alt="WindowsServerInstallation" /></p>

<p>We can configure some things, such as the screen resolution or keyboard. You can also make a folder in your hard disk available to your VM, the same way you use shared folders in VirtualBox.</p>

<p><img src="../assets/Windows_Server_in_Azure/20.png" alt="WindowsServerInstallation" /></p>

<p>It will then ask for the user and password.</p>

<p><img src="../assets/Windows_Server_in_Azure/21.png" alt="WindowsServerInstallation" /></p>

<p><img src="../assets/Windows_Server_in_Azure/22.png" alt="WindowsServerInstallation" /></p>

<p>And the connection will be stablished.</p>

<p><img src="../assets/Windows_Server_in_Azure/18_1.png" alt="WindowsServerInstallation" /></p>

<h2 id="connection-using-microsoft-remote-desktop">Connection using Microsoft Remote Desktop</h2>

<p>You can use Microsoft Remote Desktop in Windows and Mac.</p>

<p>One advantange of this software is that it allows us to share folders between our computer and the Azure Virtual Machine, the same way we share folders in a virtualization software (such as VirtualBox).</p>

<p>Download the software for Windows from <a href="https://apps.microsoft.com/">Microsoft Store</a> or for Mac in the <a href="https://www.apple.com/es/app-store/">App Store</a>.</p>

<p>Yo can quicky connect to the VM downloading the RDP file from azure and them make doble click on it.</p>

<p><img src="../assets/Windows_Server_in_Azure/22-4.png" alt="WindowsServerInstallation" /></p>

<p>But I advise to do it this other way to create a shared folder first. Open Microsoft Remote Desktop and go to menu “Connections -&gt; Add PC”.</p>

<p>Then follow the steps. Fill in PC name with the public IP address of the VM. In User account create a new one for the “administrador” user previously created.</p>

<p><img src="../assets/Windows_Server_in_Azure/22-5.png" alt="WindowsServerInstallation" /></p>

<p>In “Folders” tab, create a shared folder with your computer. First create the local folder. Then, use the “+” button to add it.</p>

<p><img src="../assets/Windows_Server_in_Azure/22-2.png" alt="WindowsServerInstallation" /></p>

<p>Next time you open the connection, you will find a network drive in your VM which is the local folder in your PC. It is a very convenient way to share files between both systems.</p>

<p><img src="../assets/Windows_Server_in_Azure/22-3.png" alt="WindowsServerInstallation" /></p>

<p>Once all configuration is finished you will find it in the main page each time you open the application.</p>

<blockquote>
  <p>REMEMBER</p>

  <p>The VM public IP will change. You will have to edit the created connection each time you want to connect to the VM, but you will just have to change the IP address, keeping the rest of the configuration.</p>
</blockquote>

<p><img src="../assets/Windows_Server_in_Azure/22-1.png" alt="WindowsServerInstallation" /></p>

<h2 id="initialize-the-data-disk">Initialize the data disk</h2>

<p>If you remember, we created a data disk, but it is not automanically initialized. Let’s say that we installed in the VM, but the OS does not now about it. We have to initialize and format it before we can use it.</p>

<p>Go to “Startup” icon.</p>

<p><img src="../assets/Windows_Server_in_Azure/23.png" alt="WindowsServerInstallation" /></p>

<p>Select “Administrative Tools”.</p>

<p><img src="../assets/Windows_Server_in_Azure/24.png" alt="WindowsServerInstallation" /></p>

<p>Look for “Computer Management”.</p>

<p><img src="../assets/Windows_Server_in_Azure/25.png" alt="WindowsServerInstallation" /></p>

<p>Then Storage - Disk Management.</p>

<p><img src="../assets/Windows_Server_in_Azure/26.png" alt="WindowsServerInstallation" /></p>

<p>You will get a dialog box saying that a no initialized disk has been found. Follow the wizard to initialize it. Just follow the screens.</p>

<p><img src="../assets/Windows_Server_in_Azure/27.png" alt="WindowsServerInstallation" /></p>

<p>Once initialized right click on Disk 2 and select “New simple volume”.</p>

<p><img src="../assets/Windows_Server_in_Azure/28.png" alt="WindowsServerInstallation" /></p>

<p>Follow the wizard and give the volume the label “Data”</p>

<p><img src="../assets/Windows_Server_in_Azure/29.png" alt="WindowsServerInstallation" /></p>

<p>Check that the volume is properly formated.</p>

<p><img src="../assets/Windows_Server_in_Azure/30.png" alt="WindowsServerInstallation" /></p>

<p>Now you can go to “This PC” and find unit E:</p>

<p><img src="../assets/Windows_Server_in_Azure/31.png" alt="WindowsServerInstallation" /></p>

<p>We will use this unit to install our Software and keep our data.</p>]]></content><author><name></name></author><category term="Unit0" /><summary type="html"><![CDATA[Windows Server in Azure]]></summary></entry><entry><title type="html">Oracle installation.</title><link href="http://localhost:4000/ASGBD/unit1/Oracle_installation" rel="alternate" type="text/html" title="Oracle installation." /><published>2023-03-25T14:00:00+01:00</published><updated>2023-03-25T14:00:00+01:00</updated><id>http://localhost:4000/ASGBD/unit1/Oracle_installation</id><content type="html" xml:base="http://localhost:4000/ASGBD/unit1/Oracle_installation"><![CDATA[<h1 id="installation-of-the-dbms">Installation of the DBMS</h1>

<p>The installation process of the entire DBMS will consist of installing the server, that is, the Database itself, and also installing the clients on those machines that users will use to connect to the Database. It will also be necessary to make the connection between client and server possible.</p>

<p>We could also include in this section the installation of different help tools both on the server and on the clients (as they could be in the case of Oracle Developer, to build applications with forms and reports).</p>

<h2 id="server-installation">Server installation</h2>

<blockquote>
  <p>We are going to work with <strong>Oracle 11g</strong>, an old version of the DBMS, as in the moment of writing these notes<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>, the latest long term release is 19c and the innovation release is 21c.</p>

  <p>The main reason is that its hardware and software requirements are smaller than the newest versions and the DBMS administration concepts we will learn are quite similar.</p>
</blockquote>

<p>Before we start we will need</p>

<ul>
  <li>Windows Server 2008 (64 bits) OS</li>
  <li>Oracle 11g Serfer for Windows</li>
</ul>

<p>You can download a VirtualBox .ova virtual machine and the Oracle 11g Server in 2 .zip archives <a href="https://gvaedu-my.sharepoint.com/:f:/g/personal/j_munozjimeno_edu_gva_es/Etr345tDiSlDsyGdSrelkZIBSFHwZSd1TLmdrYH9Ov8dEw?e=OI7f1l">here.</a></p>

<p>When we start the machine it should look like the following image.</p>

<p><img src="../assets/Oracle_installation/1.png" alt="Clean Machine" /></p>

<p>Next you have to download the two .zip files with Oracle Database 11g Release 2. Unzip both files on the Desktop so that it looks like this:</p>

<p><img src="../assets/Oracle_installation/2.png" alt="Clean Machine" /></p>

<p>Launch the setup.exe file to begin the installation.</p>

<p><img src="../assets/Oracle_installation/3.png" alt="Clean machine" /></p>

<p>Do not provide any data on this screen and ignore the warning message.</p>

<p><img src="../assets/Oracle_installation/4.png" alt="Clean machine" /></p>

<p>Select the first option so that after installing the Oracle software a database is configured.</p>

<p><img src="../assets/Oracle_installation/5.png" alt="Clean Machine" /></p>

<p>Choose the “Desktop Class” option since we are not going to work in production.</p>

<p><img src="../assets/Oracle_installation/6.png" alt="Clean Machine" /></p>

<p>At this point the only thing we are going to fill in is the “Global Database Name”. Fill it with “orcl.w2008”. As Administrator password and its confirmation use “system”.</p>

<p><img src="../assets/Oracle_installation/7.png" alt="Clean machine" /></p>

<p>Ignore the warning message and proceed with the installation.</p>

<p><img src="../assets/Oracle_installation/8.png" alt="Clean machine" /></p>

<p>This informative screen helps us check that the installation options are correct. Click “Finish” to begin the installation process.</p>

<p><img src="../assets/Oracle_installation/9.png" alt="Clean machine" /></p>

<p>At this point the installation process begins…</p>

<p><img src="../assets/Oracle_installation/10.png" alt="Clean machine" /></p>

<p>When finished, the “Database Configuration Wizard” creates the instance that we had previously configured.</p>

<p><img src="../assets/Oracle_installation/11.png" alt="Clean machine" /></p>

<p>When the wizard finishes, we press “Password Management…” to edit and unlock a few users.</p>

<p><img src="../assets/Oracle_installation/12.png" alt="Clean machine" /></p>

<p>We change the password of the user “SYS” and of the user “SYSTEM”. In both cases we use “system” as the password.</p>

<p><img src="../assets/Oracle_installation/13.png" alt="Clean machine" /></p>

<p>We unlock the user “SCOTT” and the user “HR”.</p>

<ul>
  <li>SCOTT: password “tiger”.</li>
  <li>HR: password “hr”.</li>
</ul>

<p><img src="../assets/Oracle_installation/14.png" alt="Clean Machine" /></p>

<p>We ignore the warning about password strength.</p>

<p><img src="../assets/Oracle_installation/15.png" alt="Clean machine" /></p>

<p>We press “OK” and we will have finished the installation.</p>

<p><img src="../assets/Oracle_installation/16.png" alt="Clean machine" /></p>

<p>In earlier versions of Oracle the main tool to manage it was a program called <em>Enterprise Manager Database Control</em>. In Oracle 11g it is no longer an application but we can access this tool as a web page and it is called <em>Oracle Enterprise Manager 11g</em>. In this last screen we see the url that we must put in the browser to be able to manage the created database (orcl).</p>

<p>The address is: https://localhost:1158/em</p>

<p><img src="../assets/Oracle_installation/17.png" alt="Clean machine" /></p>

<p>We will get into this tool in the next section.</p>

<blockquote>
  <p><em>Orace Enterprise Manager 11g</em> uses TLS 1.0 and 1.1. which are disabled by default in web browsers nowadays. You will have to find out how to enable them in the browser you select.</p>
</blockquote>

<h3 id="after-the-installation">After the installation</h3>

<p>Once the installation is completed, we will have, among others, the following elements in the Windows Start menu:</p>

<ul>
  <li>Oracle - OraDb11g home1
    <ul>
      <li><strong>Database Control - orcl</strong>. It will open the Oracle Enterprise Manager 11g accessing the https://localhost:1158/em web page in our system web browser.</li>
      <li>Application Development
        <ul>
          <li><strong>SQL Plus</strong> - SQL statement editor</li>
        </ul>
      </li>
      <li>Configuration and Migrations Tools
        <ul>
          <li>Database Configuration Assistant. Allows us to create new instances of databases, delete them, or modify the configuration of an existing one.</li>
          <li>Database Upgrade Assistant. Assistant for upgrading instances from previous versions of Oracle to the current one.</li>
          <li>Oracle Administration Assistant for Windows. Assistant for configuring the Oracle Management Server, a tool that will allow us to administer not only our server but also others on the network.</li>
          <li>Net Configuration Assistant. For connecting to the server and making the server “listen” to requests.</li>
          <li>Net Manager. It also allows us to configure network-related things.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Oracle Installation Products
    <ul>
      <li>Universal Installer. To add or remove modules.</li>
    </ul>
  </li>
</ul>

<h3 id="users">Users</h3>

<p>Once everything is properly installed, including the Database Instance, there will be several users created. We are mainly interested in 3. We already know the first one:</p>

<ul>
  <li><strong>SCOTT</strong> (password TIGER): as we already know, it is a normal user for testing.</li>
</ul>

<p>We will also have 2 administrators. During the installation, we set the password for both:</p>

<ul>
  <li><strong>SYSTEM</strong> (password SYSTEM): is the normal administrator we will use.</li>
  <li><strong>SYS</strong> (password SYSTEM): is the super-administrator. It is the only one with SYSDBA privileges, and when we connect to it, we will have to choose the SYSDBA connection mode. There will be tasks that only this user can do.</li>
</ul>

<p>Depending on the administration task, we will connect as one or the other, always keeping in mind that SYSTEM must connect as a normal user, and SYS as DBA (Connect as SYSDBA).</p>

<h2 id="tools-to-manage-the-dbms">Tools to manage the DBMS</h2>

<p>There are two ways to manage Oracle databases.</p>

<h3 id="command-line-mode">Command Line Mode</h3>
<p>The first way, which has traditionally been used, is in command line mode by giving SQL commands from SQL Plus (or similar). The connection to SYSTEM will be as usual, while the connection to SYS, as we have to do a Connect as SYSDBA.</p>

<p><img src="../assets/Oracle_installation/SQLPlusSystem.png" alt="Connectassystem" /></p>

<p><img src="../assets/Oracle_installation/SQLPlusSys.png" alt="Connectassys" /></p>

<p>We could also make the connection as SYS once we have entered SQL*Plus, by doing CONNECT SYS AS SYSDBA. In the image, we have an example where we first connect as SYSTEM, and then as SYS. Note that they will not have access to the same things.</p>

<p><img src="../assets/Oracle_installation/SQLPlusSystemSys.png" alt="Connectassys" /></p>

<h3 id="oem---oracle-enterprise-manager">OEM - Oracle Enterprise Manager</h3>
<p>The other way, which appeared starting from version 7.3, is the Oracle Enterprise Manager (OEM). It is the most convenient way to manage the DBMS, with a completely graphical environment. In the version we use (11g), we will do almost everything from the Enterprise Manager Console.</p>

<p>We can open it either using the link in the start menu or opening a web browser and typing the oem address in the navigation bar.</p>

<ul>
  <li>Start menu
    <ul>
      <li><img src="../assets/Oracle_installation/oem.png" alt="StartMenu" /></li>
    </ul>
  </li>
  <li>Browser
    <ul>
      <li><img src="../assets/Oracle_installation/oem_browser.png" alt="Browser" /></li>
    </ul>
  </li>
</ul>

<p>Just remember that if you try to log in as System you do it as a normal user but, if you log in as Sys you have to do it as Sysdba.</p>

<p><img src="../assets/Oracle_installation/connectassystem.png" alt="Connectassystem" /></p>

<p><img src="../assets/Oracle_installation/connectassysdba.png" alt="Connectassysdba" /></p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>March 2023 <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="Unit1" /><summary type="html"><![CDATA[Installation of the DBMS]]></summary></entry><entry><title type="html">Oracle DBMS basics.</title><link href="http://localhost:4000/ASGBD/unit1/Oracle_DBMS_basics" rel="alternate" type="text/html" title="Oracle DBMS basics." /><published>2023-03-21T14:00:00+01:00</published><updated>2023-03-21T14:00:00+01:00</updated><id>http://localhost:4000/ASGBD/unit1/Oracle_DBMS_basics</id><content type="html" xml:base="http://localhost:4000/ASGBD/unit1/Oracle_DBMS_basics"><![CDATA[<h1 id="oracle-installation-and-configuration">Oracle installation and configuration.</h1>

<p><img src="../assets/Oracle_DBMS_basics/T8_0.png" alt="OracleIntroduction" /></p>

<h1 id="objectives">Objectives</h1>

<p>Last year in Database Management module, Databases have been designed, translated into the Relational Model, and implemented either in Access or in Oracle. Access to the Database has also been made through the SQL language, both to retrieve information or modify it, and to create the Database itself (the tables).</p>

<p>Practical experience has also been gained in what the client-server architecture in Oracle consists of, but only from the client’s perspective.</p>

<p>The objective of this unit will be to install and configure a large Database, such as Oracle. Specifically, these tasks of managing the Database include, among others:</p>

<ul>
  <li>Know its basic structure.</li>
  <li>Install the Oracle Server.</li>
  <li>Start and stop the Database.</li>
  <li>Organize the physical space where the data is stored.</li>
  <li>Manage the objects directly.</li>
</ul>

<h1 id="functions-of-the-database-administrator-dba">Functions of the Database Administrator (DBA)</h1>

<p>The Database Administrator (DBA: DataBase Administrator) is the person responsible for the proper functioning of the Database, its installation, and correct operation. Among their functions we can find:</p>

<ul>
  <li>Installation of the DBMS, and possible updates.</li>
  <li>System startup and shutdown, although this can be done automatically.</li>
  <li>Resource allocation: memory, hard disk, …</li>
  <li>Authorize access to the DB by creating users who can access the database and specifying to which parts they do it. If there are many users, as many will have the same or similar permissions, they will have to be managed by groups (in Oracle, a ROLE must be created).</li>
  <li>Administration of the objects of the DB. Although users can create their own objects (tables, views, synonyms), there will be times when the administrator will have to manipulate them directly.</li>
  <li>DB Backup. These could be divided into partial and total backups. In case of information loss, the administrator will have to recover it.</li>
  <li>Optimize the system for better performance, both regarding the adjustment of the current system and improvements in hardware and software (tools).</li>
</ul>

<p>We will see each of these functions throughout the unit, first with a short general description and then specific to Oracle. Even if any of these functions can be done in more than one way, we will try to see them all.</p>

<h1 id="oracle-dbms-estructure">Oracle DBMS estructure</h1>

<p>Before exploring the functions of the Administrator in Oracle, it is convenient to know a little about its structure, how it is organized, to be aware of what we are doing.</p>

<p>In “smaller” DBMSs, such as ACCESS, all the tables of a specific theme (with possible queries, forms, reports, etc.) are stored in a single file. Therefore, a Database, understanding it as a set of related data belonging to a specific “universe,” is saved in a file with an .mdb extension. In DBASE, each table was stored in a file, and the Database was all that was saved in a directory.</p>

<p>In ORACLE, many users can connect (it is therefore a “large” DBMS), and a Database (more specifically an instance, as we will see later) is the set of all the tables created by all users, including the administrators, who will have many tables at their disposal to manage everything.</p>

<p>In this sense, the closest to the conception of a Database as mentioned above (a set of related data belonging to a specific “universe”) in ORACLE are users. It would be absurd to create an entire Database instance, with the work of administering it, for a Database of 10 tables. However, it is very reasonable for a user.</p>

<p>The tables of different users are stored on the hard disk in TABLE SPACES, which are sets of one or more physical files that are usually stored in the directory C:\Oracle\Oradata\nomBD, and the name of the (large) Database could be ORCL.</p>

<p>There are a few predefined table spaces to classify the different tables:</p>

<ul>
  <li>System table space (system): this is where Oracle stores all the information it needs to manage itself. It’s better not to touch it.</li>
  <li>Temporary table space (temp): where it stores temporary tables (which serve as partial results).</li>
  <li>Tools table space (tools): where tables used by different Oracle tools (Forms, Reports, etc.) are stored. If the tools are not installed, it will not be created.</li>
  <li>User table space (users): where users’ tables are stored.</li>
  <li>Index table space (index), to store indexes (primary keys and secondary indexes); if they are in a different location than the data, it is more efficient.</li>
  <li>Rollback table space (rollback): stores information to undo transactions.</li>
</ul>

<p>These would be the predefined ones, but using the appropriate tools, more table spaces can be created. It would probably be most convenient to create a table space for each large group of users (one for the accounting department, another for administration, etc.).</p>

<p>Each table space can consist of one or more files with a specific size. The name of these files is usually of this type:</p>

<ul>
  <li>USERS01.DBF (indicating that it is file 1 of the USERS table space, and it will be located in the instance directory; if the name of the instance is ORCL, it will be in: C:\Oracle\Oradata\Orcl).</li>
</ul>

<p>The administrator must ensure that there is enough space. Thus, suppose all users in a specific department share the DEPA table space. This table space only has one reserved file (DEPA01.DBF) of 20 Mb, and this space is almost entirely occupied. Then a new file (DEPA02.DBF) of 20 Mb can be assigned to the table space, for example. The capacity of the first file</p>

<p>The administrator must ensure that there is enough space. Therefore, let us suppose that all the users of a particular department share the table space DEPA. This table space only has one reserved file (DEPA01.DBF) of 20 Mb, and this space is almost fully occupied. Then, a new file (DEPA02.DBF) of 20 Mb can be assigned to the table space. Alternatively, the capacity of the first file could have been extended. However, it is not convenient to make them excessively large.</p>

<p>In short, table spaces are physical subdivisions of the Database.</p>

<p>Each user, in principle, can only see their own tables, the ones they create, unless we expressly grant permissions (grant). Even different users can give the same names to their tables (it is logical since if I only see mine, I don’t know what name the others have, and I can give a repeated name). Now suppose that a user (U1) grants permission, on their table (T1), to another user. This second user, to be able to access the first user’s table, will have to refer to it like this:</p>

<p>SELECT * FROM U1.T1;</p>

<p>Therefore, we have a logical subdivision of tables: by users (actually, Oracle uses the name SCHEMAS, schema). If I only put the name of the table, I am referring to one of my tables. If I want to refer to someone else’s table (and I have permission to do so), I have to put their name first.</p>

<p>Each user can define more objects, apart from tables, such as views, index, synonyms (convenient way to refer to a table). All of this will be part of your schema, which by default will be stored in a single TableSpace (except temporary objects).</p>

<p><img src="../assets/Oracle_DBMS_basics/T8_2_1.png" alt="TableSpaces" /></p>

<p>Besides the tablespace data files, there are other files that are kept in the same directory that are also basic. The control file (usually CONTROL01.CTL) is a file where critical information is kept, such as the location of data files. If it was damaged, the instance could not even be booted. As it is so important, it is common to have two identical or even three (CONTROL02.CTL and CONTROL03.CTL)</p>

<p>Other important files are transaction logs, also called “redo” logs (redo log files). There are a minimum of 2 files (REDO01.LOG and REDO02.LOG), although by default 3 are created. The last transactions are saved in them, although you can make it save all transactions since it was created the Database (obviously not in 2 files but in many: it will be the ARCHIVELOG operating mode, which we will see later).</p>

<p>And for the last concept a little introduction. Different processes will want to access the Database. Thus, many users can have a SQL*Plus connection, and others a connection from another tool. Each of these connections is a user process. And in the same way that there are user processes, there are also server processes, which access the Database in order to manage it. More specifically, user processes make requests to server processes and these are the ones that access the data. An example of a server process is the database writer (DBWR) which is responsible for writing the modified data blocks in the database files.</p>

<p>But as memory is much faster than disk, Oracle mounts a kind of cache area to optimize performance. It is the SYSTEM GLOBAL AREA (SGA), which contains 4 fundamental components: Data buffer cache (where the last accessed data is stored), Dictionary cache (where the last dictionary data is stored which have been accessed), Transaction Log Buffer (last updates made) and SQL Cache (where the last SQL commands executed are saved). All processes (except those that need to move physical file information from tablespaces to caches and vice versa) will access the SGA, and not directly to the hard disk. Therefore the SGA is the great communication area of the Oracle. Obviously, it suits us that all or almost all of the SGA is in central memory.</p>

<p>On the other hand, the GLOBAL PROGRAM AREA (PGA) is an area of memory used by a single process that it does not share with any other. There will be a PGA for each process of each user running.</p>

<p>An ORACLE INSTANCE is a SGA with some system processes (that access it) and a set of files (of tablespaces) also associated. In other words, an instance is a “running” Database. Two different instances will have different SGAs, with different system processes, and DIFFERENT DATA FILES. Therefore, for all intents and purposes, two Oracle instances (even if they run on the same machine) are two different Databases, which must be administered separately. The name of the first instance on a machine, by default, is ORCL. All files associated with it (data, control, …) will be saved by default in a directory called C:\ORACLE\ORADATA\ORCL. A second instance on the same machine could be named ORC0 , and all files associated with it could be stored in a directory called C:\ORACLE\ORADATA\ORC0.</p>

<p>The following figure illustrates what instances are:</p>

<p><img src="../assets/Oracle_DBMS_basics/T8_2_2.png" alt="Oracle Instances" /></p>]]></content><author><name></name></author><category term="Unit1" /><summary type="html"><![CDATA[Oracle installation and configuration.]]></summary></entry><entry><title type="html">Introduction to DBMS.</title><link href="http://localhost:4000/ASGBD/unit1/Introduction_to_DBMS" rel="alternate" type="text/html" title="Introduction to DBMS." /><published>2023-03-17T14:00:00+01:00</published><updated>2023-03-17T14:00:00+01:00</updated><id>http://localhost:4000/ASGBD/unit1/Introduction_to_DBMS</id><content type="html" xml:base="http://localhost:4000/ASGBD/unit1/Introduction_to_DBMS"><![CDATA[<h1 id="introduction-to-dmbs">Introduction to DMBS.</h1>

<p>Last year, in the Database Management module we learned how to design, create and manipulate databases using SQL DDL (Data Definition Language) and DML (Data Manipulation Language). In this module we will learn how to use the tool that allows us to implement databases, that is a DataBase Management System or DBMS.</p>

<h1 id="functions-of-the-database-management-system-dbms">Functions of the database management system (DBMS).</h1>

<p>The functions of the database management system (DBMS) are as follows:</p>

<ul>
  <li>
    <p><strong>Data storage and retrieval</strong>: The DBMS is responsible for storing and retrieving data from the database. It provides a mechanism for creating, reading, updating, and deleting data.</p>
  </li>
  <li>
    <p><strong>Concurrency control</strong>: The DBMS must ensure that multiple users can access the database at the same time without interfering with each other. To do this, the DBMS uses concurrency control techniques to ensure that each user can work with the data safely.</p>
  </li>
  <li>
    <p><strong>Integrity control</strong>: The DBMS is responsible for maintaining the integrity of the data in the database. This means that the data must be accurate and consistent at all times. The DBMS must ensure that the data is not corrupted or becomes inaccurate due to system failures or human errors.</p>
  </li>
  <li>
    <p><strong>Security control</strong>: The DBMS is responsible for ensuring that the data in the database is protected against unauthorized access. This includes user authentication, authorization of database access, and implementation of security policies.</p>
  </li>
</ul>

<h1 id="components">Components.</h1>

<p>We could summarize the components of a DBMS are as follows:</p>

<ul>
  <li>
    <p><strong>Database engine</strong>: It is the core of the DBMS. It controls all database operations, including data storage and retrieval, concurrency control, integrity control, and security control.</p>
  </li>
  <li>
    <p><strong>Query language</strong>: Allows users to perform queries and data manipulations in the database. Examples of query languages are SQL, PL/SQL, T-SQL, etc.</p>
  </li>
  <li>
    <p><strong>User interface</strong>: Allows users to interact with the DBMS. It can be a graphical user interface (GUI), a command line, an API, etc.</p>
  </li>
  <li>
    <p><strong>Administration tools</strong>: Allow database administrators to manage the database and perform tasks such as creating and modifying tables, assigning user permissions, performing backups, etc.</p>
  </li>
</ul>

<h1 id="types">Types.</h1>

<p>There are different types of DBMS, among which are:</p>

<ul>
  <li>
    <p>Relational DBMS: Store data in relational tables and use SQL as query language. Examples of relational DBMS are Oracle, MySQL, Microsoft SQL Server, etc.</p>
  </li>
  <li>
    <p>NoSQL DBMS: Do not use relational tables to store data. Instead, they use non-relational data structures such as documents, graphs, or columns. Examples of NoSQL DBMS are MongoDB, Cassandra, Couchbase, etc.</p>
  </li>
  <li>
    <p>Desktop DBMS: Are DBMS that run on a desktop or laptop computer. Examples of desktop DBMS are Microsoft Access, FileMaker Pro, etc.</p>
  </li>
  <li>
    <p>Cloud DBMS: Are DBMS that run in the cloud and are accessible over the Internet. Examples of cloud DBMS are Amazon RDS, Microsoft Azure SQL Database, Google Cloud SQL, etc.</p>
  </li>
</ul>

<h1 id="dbms-architecture">DBMS Architecture.</h1>

<p>We could also make a classification of DBMS according to the number of layers between the user and the database. There are three types of DBMS (Database Management System):</p>

<ul>
  <li><strong>Single Layer DBMS</strong>: there is only one layer between the user and the database. This layer provides an interface to the user to access the database. The user interacts with the database directly. The database is managed by a single program that provides an interface for the user to manipulate the data. Examples of single-layer DBMS include dBase, FileMaker, and FoxPro.</li>
</ul>

<p><img src="https://jorgesanchez.net/manuales/abd/bases-sgbd-web-resources/image/3.png" alt="SingleLayer" /></p>

<ul>
  <li><strong>Two Layer DBMS</strong>: there are two layers between the user and the database. The first layer is the user interface layer, which provides an interface to the user to access the database. The second layer is the database management layer, which manages the database and provides functions to the user interface layer.  Examples of two-layer DBMS include MySQL, PostgreSQL, Oracle, and SQL Server.</li>
</ul>

<p><img src="https://jorgesanchez.net/manuales/abd/bases-sgbd-web-resources/image/4.png" alt="2layer" /></p>

<ul>
  <li><strong>Three Layer DBMS</strong>: there are three layers between the user and the database. The first layer is the user interface layer, which provides an interface to the user to access the database. The second layer is the application layer, which manages the application and provides functions to the user interface layer. The third layer is the database management layer, which manages the database and provides functions to the application layer. Examples of three-layer DBMS include IBM DB2, SAP Sybase, and Informix.</li>
</ul>

<p><img src="https://jorgesanchez.net/manuales/abd/bases-sgbd-web-resources/image/5.png" alt="3layer" /></p>

<h1 id="ansisparc-architecture-of-a-dbms">ANSI/SPARC architecture of a DBMS.</h1>

<p>The <strong>ANSI/SPARC architecture</strong> of a DBMS stands for the <em>American National Standards Institute/Standards Planning And Requirements Committee</em> architecture of a Database Management System. It is a conceptual framework for designing and developing database management systems that was proposed by the ANSI in the 1970s.</p>

<p>The ANSI/SPARC architecture defines three levels of abstraction in a DBMS:</p>

<ul>
  <li>
    <p><strong>External level</strong>: This is the level at which individual user views of the data are defined. Each user can have their own view of the data that is tailored to their specific needs. This level is concerned with the user interface and the way in which data is presented to users.</p>
  </li>
  <li>
    <p><strong>Conceptual level</strong>: This is the level at which the overall logical structure of the database is defined. It defines the relationships between data elements and how they are organized into tables or other structures. This level is concerned with the overall design of the database and the relationships between data elements.</p>
  </li>
  <li>
    <p><strong>Internal level</strong>: This is the level at which the physical implementation of the database is defined. It defines how the data is stored on disk or other storage media and how it is accessed and retrieved by the system. This level is concerned with the technical details of the database implementation.</p>
  </li>
</ul>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/d/df/4-2_ANSI-SPARC_three_level_architecture.jpg" alt="ANSI/SPARC architecture" /></p>

<p>The ANSI/SPARC architecture also defines several components that make up a DBMS:</p>

<ul>
  <li>
    <p><strong>Data definition language (DDL)</strong>: This is the language used to define the structure of the database and its relationships.</p>
  </li>
  <li>
    <p><strong>Data manipulation language (DML)</strong>: This is the language used to insert, update, and delete data in the database.</p>
  </li>
  <li>
    <p><strong>Data control language (DCL)</strong>: This is the language used to control access to the database, including the creation of user accounts and setting access privileges.</p>
  </li>
  <li>
    <p><strong>Query language</strong>: This is the language used to retrieve data from the database.</p>
  </li>
</ul>

<p>The ANSI/SPARC architecture provides a clear separation between the different levels of abstraction in a DBMS, which allows for greater flexibility and scalability in database design and implementation.</p>

<hr />

<h2 id="references">References</h2>
<p><a href="https://jorgesanchez.net/manuales/abd/bases-sgbd.html">Manual de Administración de Bases de Datos - Jorge Sanchez.net</a></p>

<p><a href="https://www.guru99.com/dbms-architecture.html">Database Architecture in DBMS: 1-Tier, 2-Tier and 3-Tier - Guru99</a></p>]]></content><author><name></name></author><category term="Unit1" /><summary type="html"><![CDATA[Introduction to DMBS.]]></summary></entry></feed>